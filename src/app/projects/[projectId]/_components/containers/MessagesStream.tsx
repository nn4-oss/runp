"use client";

import React from "react";

import { useTRPC } from "@/trpc/client";
import { useSuspenseQuery } from "@tanstack/react-query";

import AssistantBubble from "../data/AssistantBubble";
import UserBubble from "../data/UserBubble";
import LoadingBubble from "../data/LoadingBubble";

import { MessageRole, type Fragment } from "generated/prisma";

type MessagesStreamProps = {
  projectId: string;
  activeFragment: Fragment | null;
  setActiveFragment: (fragment: Fragment | null) => void;
};

function MessagesStream({
  projectId,
  activeFragment,
  setActiveFragment,
}: MessagesStreamProps) {
  const streamEndRef = React.useRef<HTMLDivElement>(null);

  const trpc = useTRPC();
  const { data: messages } = useSuspenseQuery(
    trpc.messages.getMany.queryOptions(
      { projectId },
      {
        /** [TODO] Create WS server instead of polling every 5s to avoid extra DB load */
        refetchInterval: 5000,
        refetchOnWindowFocus: true,
      },
    ),
  );

  /** Show loading state if Last saved message was not sent by user  */
  const lastMessage = messages.at(-1);
  const isLastUserMessage = lastMessage?.role === "USER";

  /** Auto-scroll to bottom when messages change */
  React.useEffect(() => {
    streamEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages.length]);

  /** Auto-select the last fragment generated by the code agent */
  React.useEffect(() => {
    const lastAssistantMessage = messages.findLast(
      (m) => m.role === MessageRole.ASSISTANT && !!m.fragment,
    );
    if (
      lastAssistantMessage &&
      lastAssistantMessage.fragment?.id !== activeFragment?.id
    ) {
      setActiveFragment(lastAssistantMessage.fragment);
    }
  }, [messages, activeFragment?.id, setActiveFragment]);

  return (
    <div className="grid g-large-10 p-t-large-10">
      {messages.map((message) => (
        <React.Fragment key={message.id}>
          {message.role === MessageRole.USER && (
            <UserBubble content={message.content} />
          )}
          {message.role === MessageRole.ASSISTANT && (
            <AssistantBubble
              type={message.type}
              content={message.content}
              fragment={message.fragment}
              createdAt={message.createdAt}
              isActiveFragment={activeFragment?.id === message.fragment?.id}
              onFragmentClick={() => setActiveFragment(message.fragment)}
            />
          )}
        </React.Fragment>
      ))}

      {isLastUserMessage && <LoadingBubble />}

      <div ref={streamEndRef} />
    </div>
  );
}

export default MessagesStream;
