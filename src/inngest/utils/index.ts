import { Sandbox } from "@e2b/code-interpreter";
import { SANDBOX_TIMEOUT } from "../config/sandbox-variables";

import type { AgentResult, Message, TextMessage } from "@inngest/agent-kit";

export async function getSandbox(sandboxId: string) {
  const sandbox = await Sandbox.connect(sandboxId);

  /** Add sandbox_timeout extends sandboxes TTL duration */
  await sandbox.setTimeout(SANDBOX_TIMEOUT);
  return sandbox;
}

type AssistantMessage = TextMessage | undefined;
export async function getLastMessageContent(result: AgentResult) {
  /** Find the last message generated by assistants */
  const lastAssistantMessageIndex = result.output.findLastIndex(
    (message) => message.role === "assistant",
  );
  const message = result.output[lastAssistantMessageIndex] as AssistantMessage;

  /** No generate messages yet */
  if (!message?.content) return undefined;

  /**
   * Sometimes the response can be an array of string,
   * in this case, the value is joined in a single string and pass as is.
   */
  if (typeof message.content !== "string") {
    return message.content.map((c) => c.text).join("");
  }

  /** Last message was found and is of type string */
  return message.content;
}

export async function getParsedAgentOutput(
  contentArray: Message[],
  defaultFallback: string,
): Promise<string> {
  if (!contentArray || contentArray.length === 0) return defaultFallback;
  if (contentArray[0]?.type !== "text") return defaultFallback;

  const output = contentArray[0]?.content;

  /** Ensure we only accept string or string[] */
  if (typeof output === "string") return output;

  /* Rare exception: Always return a string in this case */
  if (Array.isArray(output)) {
    // Reject non-primitive silently
    const parts = output
      .map((part) =>
        typeof part === "string"
          ? part
          : part == null
            ? ""
            : typeof part === "number" || typeof part === "boolean"
              ? String(part)
              : "",
      )
      .join("");
    return parts.length > 0 ? parts : defaultFallback;
  }

  return output;
}
